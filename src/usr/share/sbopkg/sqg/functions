#!/bin/bash

sanity_checks() {
  if [[ ! -e $SBOPKG_CONF ]]; then
    echo "$SBOPKG_CONF not found."
    echo "Check the configurable variables at the top of the script."
    exit 1
  else
    . $SBOPKG_CONF
  fi

  if [ -d $REPO_ROOT/$REPO_NAME/.git ]; then
    REPO_SUBPATH=$REPO_NAME
  else
    REPO_SUBPATH=$REPO_NAME/$REPO_BRANCH
  fi
  
  REPO_DIR=$REPO_ROOT/$REPO_SUBPATH
  if [[ ! -w $QUEUEDIR || ! -d $REPO_DIR ]]; then
    echo "ERROR: $QUEUEDIR or $REPO_DIR do not exist or are not writable."
    echo "Check the configurable variables at the top of the script."
    exit 1
  fi
  
  HASPARALLEL="no"
  parallel --help &> /dev/null
  if [ $? -eq 255 ]; then
    HASPARALLEL="yes"
  fi
}

usage() {
  local SCRIPT="$1"

cat << EOF
Usage: $SCRIPT -p <packagename(s)> | -a [-j]
Options are:
  -p package(s) Creates queuefile(s) individual package(s).
                Multiple packages can be passed with quotes,
                e.g. -p "pkg1 pkg2".
                Packages with an empty REQUIRES= line will be skipped unless
                SKIP_EMPTY is uncommented at the top of the script.
                Package names are case-sensitive.
  -a            Build queuefile for all packages.
  -j            Number of concurrent queue file generation.
                This could heavily raise disk I/O so use with care.
                Requires: GNU parallel
                Default: 1

This script will overwrite existing queuefiles in \$QUEUEDIR so back up any
existing queuefiles or local modifications. Check the top of the script for
configurable variables.
EOF
exit
}

search_package () {
  local REPO_DIR="$1"
  local SRCHAPP="$2"

  cd $REPO_DIR
  PKGPATH=( $(find -type d -mindepth 2 -maxdepth 2 -name "$SRCHAPP" | sort) )
  if [[ -z $PKGPATH ]]; then
    return 1
  else
    return 0
  fi
}

parse_queuefile_requires () {
  local REPO_DIR="$1"
  local PARSEAPP="$2"
  local QUEUEFILE="$3"
  local DEPLIST DEP

  if search_package "$REPO_DIR" "$PARSEAPP"; then
    . $REPO_DIR/$PKGPATH/$PARSEAPP.info
    DEPLIST=($REQUIRES)
    for DEP in "${DEPLIST[@]}"; do
      if [[ "$DEP" == "%README%" ]]; then
        echo "# %README%: see the $PARSEAPP README file. " >> $QUEUEFILE
        continue
      fi

      if search_package "$REPO_DIR" "$DEP"; then
        sed -i "/^$DEP$/ d" $QUEUEFILE
        echo "$DEP" >> $QUEUEFILE
        parse_queuefile_requires "$REPO_DIR" "$DEP" "$QUEUEFILE"
      fi
    done
  else
    continue
  fi
}

build_queuefile () {
  local REPO_DIR="$1"
  local QUEUEDIR="$2"
  local PRGNAM="$3"
  local OLDFILE=$QUEUEDIR/$PRGNAM.sqf
  local QUEUEFILE=$QUEUEDIR/$PRGNAM.sqf.tmp
  local CATFILE=$QUEUEDIR/$PRGNAM.tmp.sqf

  touch $QUEUEFILE
  echo "$PRGNAM" > $QUEUEFILE
  parse_queuefile_requires "$REPO_DIR" "$PRGNAM" "$QUEUEFILE"
  tac $QUEUEFILE > $CATFILE
  if cmp -s "$CATFILE" "$OLDFILE"; then
    rm $QUEUEFILE $CATFILE
  else
    mv $CATFILE $OLDFILE
    rm $QUEUEFILE
  fi
}

main_loop () {
  local PKGS="$1"
  local INFO

  for MAINAPP in $PKGS; do
    if search_package "$REPO_DIR" "$MAINAPP"; then
      . $REPO_DIR/$PKGPATH/$MAINAPP.info
      if [[ -z $REQUIRES && $SKIP_EMPTY == "" ]]; then
        echo "$MAINAPP: empty REQUIRES line. No queuefile generated."
        echo "Uncomment SKIP_EMPTY to change this."
        continue
      else
        echo "Processing $MAINAPP."
        build_queuefile "$REPO_DIR" "$QUEUEDIR" "$PRGNAM"
      fi
    else
      echo "$MAINAPP: not found."
      exit 1
    fi
  done
}

main_loop_all () {
  local REPO_DIR="$1"
  local QUEUEDIR="$2"
  local JOBS="$3"
  local INFO

  printf "Processing all SlackBuilds in the $REPO_SUBPATH repository..."

  if [ $HASPARALLEL == "yes" ]; then
    find $REPO_DIR -name *.info | \
      parallel --eta --will-cite --jobs $JOBS \
      /usr/share/sbopkg/sqg/main_loop_all "$REPO_DIR" "$QUEUEDIR" {}
  else
    for INFO in $(find $REPO_DIR -name *.info); do
      . $INFO
      main_loop "$PRGNAM" &> /dev/null
      printf "."
    done
  fi
}
